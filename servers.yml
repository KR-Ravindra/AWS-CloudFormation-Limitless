Parameters:
    EnvironmentName:
        Description: An Environment name that will be prefixed to resources
        Type: String
    EC2InstanceProfileRole:
        Description: IAM Role profile to be used when launching an EC2 Instance.
        Type: String
Resources:
    LBSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Allow HTTP to the load balancer.
        VpcId:
          Fn::ImportValue:   
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress: 
          - IpProtocol: tcp
            FromPort: 80 
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress: 
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            CidrIp: 0.0.0.0/0
    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: Allow HTTP to our hosts.
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress: 
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress: 
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0  

    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install awscli -y
            apt-get install apache2 -y
            apt-get install unzip -y
            cd /var/www/html
            aws s3 cp s3://udacity-udagram-storage/udagram.zip .
            unzip -o udagram.zip
            #echo "Hey!,It works.. I am Udagram!" >> index.html
            systemctl start apache2.service

        ImageId: ami-0fc20dd1da406780b
        SecurityGroups:
        - Ref: WebServerSecGroup
        InstanceType: t3.small
        IamInstanceProfile: !Ref EC2InstanceProfileRole
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
    WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PRIV-NETS"
        LaunchConfigurationName:
          Ref: WebAppLaunchConfig
        MinSize: 1
        MaxSize: 2
        TargetGroupARNs:
        - Ref: WebAppTargetGroup
    WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        SecurityGroups:
        - Ref: LBSecGroup
    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppLB
        Port: '80'
        Protocol: HTTP
    ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId:
          Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-VPCID"
Outputs:
    LoadBalancerDns:
        Description: The uri of the load balancer.
        Value: !GetAtt WebAppLB.DNSName
        Export: 
            Name: !Sub ${EnvironmentName}-LB-DNS